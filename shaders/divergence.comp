#version 460 
    
#define WALL(index) fluid_buffer[OFFSET_WALL + index]
#define VEL_H(index) fluid_buffer[OFFSET_VEL_H + index]
#define VEL_H_2(index) fluid_buffer[OFFSET_VEL_H_2 + index]
#define VEL_V(index) fluid_buffer[OFFSET_VEL_V + index]
#define VEL_V_2(index) fluid_buffer[OFFSET_VEL_V_2 + index]
#define PRESSURE(index) fluid_buffer[OFFSET_PRESSURE + index]
#define COLOR(index) fluid_buffer[OFFSET_COLOR + index]
#define COLOR_2(index) fluid_buffer[OFFSET_COLOR_2 + index]
        
layout(push_constant) uniform push_constants {
    uint[5] sim_state;
    float[3] fluid_constants;
};
layout(std430, binding = 0) buffer storage_buffer {
    float[] fluid_buffer;
};
layout(binding = 1, rgba8) uniform writeonly image2D fluid_image;
layout(local_size_x = 16, local_size_y = 16) in;
       

const float max_speed = 8000;
const float min_speed = -8000;

void main() {
    uint width = sim_state[0];
    uint height = sim_state[1];
    uint x = gl_GlobalInvocationID.x * 2 + 1;
    uint y = gl_GlobalInvocationID.y + 1;
    if(sim_state[3] == 1) {
        x += y % 2;
    } else {
        x += ((y + 1) % 2);
    }    
    if(x >= width - 1 || y >= height - 1)
        return;
    uint sim_size = width * height;
    uint index = y * width + x;
        
    uint OFFSET_WALL = 0;
    uint OFFSET_VEL_H = 1 * sim_size;
    uint OFFSET_VEL_H_2 = 2 * sim_size;
    uint OFFSET_VEL_V = 3 * sim_size;
    uint OFFSET_VEL_V_2 = 4 * sim_size;
    uint OFFSET_PRESSURE = 5 * sim_size;
    uint OFFSET_COLOR = 6 * sim_size;
    uint OFFSET_COLOR_2 = 9 * sim_size;
    if(sim_state[2] == 0) {    
        OFFSET_VEL_H = 2 * sim_size;
        OFFSET_VEL_H_2 = 1 * sim_size;
        OFFSET_VEL_V = 4 * sim_size;
        OFFSET_VEL_V_2 = 3 * sim_size;
        OFFSET_COLOR = 9 * sim_size;
        OFFSET_COLOR_2 = 6 * sim_size;
    }    
    float overrelaxation = fluid_constants[1];
    float pressure_constant = (998.0 * 1.0) / fluid_constants[2];
    
    float divergence = -VEL_H_2(index) + VEL_H_2(index + 1) - VEL_V_2(index) + VEL_V_2(index + width);
    float sides = WALL(index - 1) + WALL(index + 1) + WALL(index - width) + WALL(index + width);
    divergence = (divergence / sides) * overrelaxation;
    VEL_H_2(index) = clamp(VEL_H_2(index) + divergence * WALL(index - 1), min_speed, max_speed); 
    VEL_H_2(index + 1) = clamp(VEL_H_2(index + 1) - divergence * WALL(index + 1), min_speed, max_speed);
    VEL_V_2(index) = clamp(VEL_V_2(index) + divergence * WALL(index - width), min_speed, max_speed);
    VEL_V_2(index + width) = clamp(VEL_V_2(index + width) - divergence * WALL(index + width), min_speed, max_speed);
    PRESSURE(index) -= divergence * pressure_constant;        
}
