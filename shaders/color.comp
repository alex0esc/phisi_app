#version 460           
#extension GL_ARB_shading_language_include : require
#include "functions.glsl"    

     
#define WALL(index) fluid_buffer[OFFSET_WALL + index]
#define VEL_H(index) fluid_buffer[OFFSET_VEL_H + index]
#define VEL_H_2(index) fluid_buffer[OFFSET_VEL_H_2 + index]
#define VEL_V(index) fluid_buffer[OFFSET_VEL_V + index]
#define VEL_V_2(index) fluid_buffer[OFFSET_VEL_V_2 + index]
#define PRESSURE(index) fluid_buffer[OFFSET_PRESSURE + index]
#define COLOR(index) fluid_buffer[OFFSET_COLOR + index]
#define COLOR_2(index) fluid_buffer[OFFSET_COLOR_2 + index]
 
layout(push_constant) uniform push_constants {
    uint[4] sim_state;
    float[4] fluid_constants;
};
layout(std430, binding = 0) buffer storage_buffer {
    float[] fluid_buffer;
};
layout(binding = 1, rgba8) uniform writeonly image2D fluid_image;
layout(local_size_x = 16, local_size_y = 16) in;
    

void main() {
    uint width = sim_state[0];
    uint height = sim_state[1];
    uint x = gl_GlobalInvocationID.x + 1;
    uint y = gl_GlobalInvocationID.y + 1;
    if(x >= width - 1 || y >= height - 1)
        return;
    uint sim_size = width * height;
    uint index = y * width + x;
        
    uint OFFSET_WALL = 0;
    uint OFFSET_VEL_H = 1 * sim_size;
    uint OFFSET_VEL_H_2 = 2 * sim_size;
    uint OFFSET_VEL_V = 3 * sim_size;
    uint OFFSET_VEL_V_2 = 4 * sim_size;
    uint OFFSET_PRESSURE = 5 * sim_size;
    uint OFFSET_COLOR = 6 * sim_size;
    uint OFFSET_COLOR_2 = 9 * sim_size;
    if(sim_state[2] == 0) {    
        OFFSET_VEL_H = 2 * sim_size;
        OFFSET_VEL_H_2 = 1 * sim_size;
        OFFSET_VEL_V = 4 * sim_size;
        OFFSET_VEL_V_2 = 3 * sim_size;
        OFFSET_COLOR = 9 * sim_size;
        OFFSET_COLOR_2 = 6 * sim_size;
    }  
        
    
    float div = 1.0;
    if(x > width / 2) {
        div = 3.0;
    }
    float[3] color;
    float frame_time = fluid_constants[2];

    //first step
    vec2 cell_vec = vec2(VEL_H_2(index) + VEL_H_2(index + 1) / 2.0, VEL_V_2(index) + VEL_V_2(index + width) / 2.0) * -frame_time / div; 
    vec2 cell_loc = vec2(float(x) + 0.5, float(y) + 0.5);
    reflect_in_box(width, height, cell_vec, cell_loc);  


    if(x > width / 2) {
    //second step
    uint x_traced = uint(cell_loc.x);
    uint y_traced = uint(cell_loc.y);
    uint cell_index = y_traced * width + x_traced; 
    float x_inner = cell_loc.x - float(x_traced);
    float y_inner = cell_loc.y - float(y_traced);
    cell_vec = vec2(mix(VEL_H_2(cell_index), VEL_H_2(cell_index + 1), x_inner), mix(VEL_V_2(cell_index), VEL_V_2(cell_index + width), y_inner)) * -frame_time / div;
    reflect_in_box(width, height, cell_vec, cell_loc);

    //third step
    x_traced = uint(cell_loc.x);
    y_traced = uint(cell_loc.y);
    cell_index = y_traced * width + x_traced; 
    x_inner = cell_loc.x - float(x_traced);
    y_inner = cell_loc.y - float(y_traced);
    cell_vec = vec2(mix(VEL_H_2(cell_index), VEL_H_2(cell_index + 1), x_inner), mix(VEL_V_2(cell_index), VEL_V_2(cell_index + width), y_inner)) * -frame_time / div;
    reflect_in_box(width, height, cell_vec, cell_loc);
    }

    uint[4] indices;
    float[4] weights;
    float multiplayer;
    INTERPOLATE(cell_loc - vec2(0.5, 0.5), indices, weights, multiplayer);
    for(int i = 0; i < 3; i++) {        
      color[i] += multiplayer * 
        (COLOR(indices[0] * 3 + i) * weights[0] + 
        COLOR(indices[1] * 3 + i) * weights[1] + 
        COLOR(indices[2] * 3 + i) * weights[2] + 
        COLOR(indices[3] * 3 + i) * weights[3]);
      /*float min_clamp = min(min(COLOR((index - 1) * 3 + i), COLOR((index + 1) * 3 + i)), min(COLOR((index - width) * 3 + i), COLOR((index + width) * 3 + i)));
      float max_clamp = max(max(COLOR((index - 1) * 3 + i), COLOR((index + 1) * 3 + i)), max(COLOR((index - width) * 3 + i), COLOR((index + width) * 3 + i)));
      color[i] = clamp(color[i], min_clamp, max_clamp);
      */
    }
    
    
    //copy image
    COLOR_2(index * 3) = color[0];
    COLOR_2(index * 3 + 1) = color[1];
    COLOR_2(index * 3 + 2) = color[2];
    vec4 img_color = vec4(color[0], color[1], color[2], 1.0);
    imageStore(fluid_image, ivec2(gl_GlobalInvocationID.xy), img_color);
}
