#version 460  
#extension GL_ARB_shading_language_include : require
#include "functions.glsl"    

#define WALL(index) fluid_buffer[OFFSET_WALL + index]
#define VEL_H(index) fluid_buffer[OFFSET_VEL_H + index]
#define VEL_H_2(index) fluid_buffer[OFFSET_VEL_H_2 + index]
#define VEL_V(index) fluid_buffer[OFFSET_VEL_V + index]
#define VEL_V_2(index) fluid_buffer[OFFSET_VEL_V_2 + index]
#define PRESSURE(index) fluid_buffer[OFFSET_PRESSURE + index]
#define COLOR(index) fluid_buffer[OFFSET_COLOR + index]
#define COLOR_2(index) fluid_buffer[OFFSET_COLOR_2 + index]
 
    
layout(push_constant) uniform push_constants {
    uint width;
    uint height;
    uint buffer_state;
    uint divergence_state;
    uint rk_steps;
    float gravity;
    float overrelaxation; 
    float frame_time;
    float pressure_constant;   
    float saturation;
    uint pencil_mode;    
    float pencil_radius;
    vec2 pencil_pos;
    float pencil_data[3];
};
layout(std430, binding = 0) buffer storage_buffer {
    float[] fluid_buffer;
};
layout(binding = 1, rgba8) uniform writeonly image2D fluid_image;
layout(local_size_x = 16, local_size_y = 16) in;
    

void main() {
    uint x = gl_GlobalInvocationID.x + 1;
    uint y = gl_GlobalInvocationID.y + 1;
    if(x >= width - 1 || y >= height - 1)
        return;
    uint sim_size = width * height;
    uint index = y * width + x;
        
    uint OFFSET_WALL = 0;
    uint OFFSET_VEL_H = 1 * sim_size;
    uint OFFSET_VEL_H_2 = 2 * sim_size;
    uint OFFSET_VEL_V = 3 * sim_size;
    uint OFFSET_VEL_V_2 = 4 * sim_size;
    uint OFFSET_PRESSURE = 5 * sim_size;
    uint OFFSET_COLOR = 6 * sim_size;
    uint OFFSET_COLOR_2 = 9 * sim_size;
    if(buffer_state == 0) {    
        OFFSET_VEL_H = 2 * sim_size;
        OFFSET_VEL_H_2 = 1 * sim_size;
        OFFSET_VEL_V = 4 * sim_size;
        OFFSET_VEL_V_2 = 3 * sim_size;
        OFFSET_COLOR = 9 * sim_size;
        OFFSET_COLOR_2 = 6 * sim_size;
    }
            
    //vertical velocity
    if (y > 1) {
        //first step
        float vel_h = (VEL_H(index) + VEL_H(index + 1) + VEL_H(index - width) + VEL_H(index - width + 1)) / 4.0;
        vec2 cell_vec = vec2(vel_h, VEL_V(index)) * -frame_time / rk_steps;
        vec2 cell_loc = vec2(float(x) + 0.5f, float(y));
        reflect_in_box(width, height, cell_vec, cell_loc);
        
        //other steps
        for(int i = 0; i < rk_steps - 1; i++) {
            uint x_traced = uint(cell_loc.x);
            uint y_traced = uint(cell_loc.y);
            uint cell_index = y_traced * width + x_traced; 
            float x_inner = cell_loc.x - float(x_traced);
            float y_inner = cell_loc.y - float(y_traced);
            cell_vec = vec2(mix(VEL_H_2(cell_index), VEL_H_2(cell_index + 1), x_inner), mix(VEL_V_2(cell_index), VEL_V_2(cell_index + width), y_inner)) * -frame_time / rk_steps;
            reflect_in_box(width, height, cell_vec, cell_loc);
        }
          
        //interpolate
        uint[4] indices;
        float[4] weights;
        float multiplayer;
        INTERPOLATE(cell_loc - vec2(0.5, 0.0), indices, weights, multiplayer);
        VEL_V_2(index) = multiplayer *
          (VEL_V(indices[0]) * weights[0] + 
          VEL_V(indices[1]) * weights[1] + 
          VEL_V(indices[2]) * weights[2] + 
          VEL_V(indices[3]) * weights[3]);
    }

    //horizontal velocity
    if (x > 1) {   
        //first step
        float vel_v = (VEL_V(index - 1) + VEL_V(index) + VEL_V(index + width) + VEL_V(index + width - 1)) / 4.0;
        vec2 cell_vec = vec2(VEL_H(index), vel_v) * -frame_time / rk_steps;
        vec2 cell_loc = vec2(float(x), float(y) + 0.5f);
        reflect_in_box(width, height, cell_vec, cell_loc);  
        
        //other steps
        for(int i = 0; i < rk_steps - 1; i++) {
            uint x_traced = uint(cell_loc.x);
            uint y_traced = uint(cell_loc.y);
            uint cell_index = y_traced * width + x_traced; 
            float x_inner = cell_loc.x - float(x_traced);
            float y_inner = cell_loc.y - float(y_traced);
            cell_vec = vec2(mix(VEL_H_2(cell_index), VEL_H_2(cell_index + 1), x_inner), mix(VEL_V_2(cell_index), VEL_V_2(cell_index + width), y_inner)) * -frame_time / rk_steps;
            reflect_in_box(width, height, cell_vec, cell_loc);
        }
        
        //interpolate
        uint[4] indices;
        float[4] weights;
        float multiplayer;
        INTERPOLATE(cell_loc - vec2(0.0, 0.5), indices, weights, multiplayer);
        VEL_H_2(index) = multiplayer *
          (VEL_H(indices[0]) * weights[0] + 
          VEL_H(indices[1]) * weights[1] + 
          VEL_H(indices[2]) * weights[2] + 
          VEL_H(indices[3]) * weights[3]);
    }
}
